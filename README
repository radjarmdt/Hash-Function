	#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define TABLE_SIZE 10

struct node {
    char data[100];
    struct node *next;
} *hashTable[TABLE_SIZE], *curr;

int hashFunctionChoice = 1; // Default Division
int collisionHandlingChoice = 1; // Default Chaining

// MID-SQUARE METHOD
int midSquareHash(int key) {
    int squared = key * key;
    int middle = (squared / 100) % 100; // Ambil dua digit tengah
    return middle % TABLE_SIZE;
}

// DIVISION METHOD
int divHash(int key) {
    return key % TABLE_SIZE;
}

// FOLDING METHOD
int foldingHash(int key) {
    int part1 = key / 1000;
    int part2 = key % 1000;
    return (part1 + part2) % TABLE_SIZE;
}

// DIGIT EXTRACTION METHOD
int digitExtractionHash(int key) {
    return ((key / 10) % 10 + (key % 10)) % TABLE_SIZE;
}

// ROTATION METHOD
int rotationHash(int key) {
    int rotated = (key % 10) * 100 + (key / 10);
    return rotated % TABLE_SIZE;
}

int computeHashKey(char data[]) {
    int key = tolower(data[0]) - 'a';
    switch (hashFunctionChoice) {
        case 1: return divHash(key);
        case 2: return midSquareHash(key);
        case 3: return foldingHash(key);
        case 4: return digitExtractionHash(key);
        case 5: return rotationHash(key);
        default: return divHash(key);
    }
}

void pushBack(int hashKey, char data[]) {
    struct node *newNode = (struct node*) malloc(sizeof(struct node));
    strcpy(newNode->data, data);
    newNode->next = NULL;

    if (collisionHandlingChoice == 1) { // Chaining
        if (hashTable[hashKey] == NULL) {
            hashTable[hashKey] = newNode;
        } else {
            curr = hashTable[hashKey];
            while (curr->next != NULL) curr = curr->next;
            curr->next = newNode;
        }
    }
}

void viewHashTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        printf("Hash Table Index [%d]: ", i);
        curr = hashTable[i];
        while (curr != NULL) {
            printf("%s -> ", curr->data);
            curr = curr->next;
        }
        printf("NULL\n");
    }
}

void menu() {
    printf("Pilih metode Hash Function:\n");
    printf("1. Division\n2. Mid-Square\n3. Folding\n4. Digit Extraction\n5. Rotation\n");
    printf("Masukkan pilihan: ");
    scanf("%d", &hashFunctionChoice);

    printf("\nPilih metode Collision Handling:\n");
    printf("1. Chaining (Linked List)\n");
    printf("Masukkan pilihan: ");
    scanf("%d", &collisionHandlingChoice);
}

int main() {
    menu();
    char data[100];
    
    do {
        printf("Input Data: ");
        scanf("%s", data);
        
        if (strcasecmp(data, "exit") == 0) break;
        pushBack(computeHashKey(data), data);
        
    } while (1);
    
    viewHashTable();
    return 0;
}
